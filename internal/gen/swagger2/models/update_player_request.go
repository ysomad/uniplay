// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdatePlayerRequest update player request
//
// swagger:model UpdatePlayerRequest
type UpdatePlayerRequest struct {

	// avatar url
	// Required: true
	// Format: uri
	AvatarURL strfmt.URI `json:"avatar_url"`

	// first name
	// Required: true
	// Max Length: 32
	// Min Length: 2
	FirstName string `json:"first_name"`

	// last name
	// Required: true
	// Max Length: 32
	// Min Length: 2
	LastName string `json:"last_name"`

	// team id
	// Required: true
	TeamID int32 `json:"team_id"`
}

// Validate validates this update player request
func (m *UpdatePlayerRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePlayerRequest) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("avatar_url", "body", strfmt.URI(m.AvatarURL)); err != nil {
		return err
	}

	if err := validate.FormatOf("avatar_url", "body", "uri", m.AvatarURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePlayerRequest) validateFirstName(formats strfmt.Registry) error {

	if err := validate.RequiredString("first_name", "body", m.FirstName); err != nil {
		return err
	}

	if err := validate.MinLength("first_name", "body", m.FirstName, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("first_name", "body", m.FirstName, 32); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePlayerRequest) validateLastName(formats strfmt.Registry) error {

	if err := validate.RequiredString("last_name", "body", m.LastName); err != nil {
		return err
	}

	if err := validate.MinLength("last_name", "body", m.LastName, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("last_name", "body", m.LastName, 32); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePlayerRequest) validateTeamID(formats strfmt.Registry) error {

	if err := validate.Required("team_id", "body", int32(m.TeamID)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update player request based on context it is used
func (m *UpdatePlayerRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdatePlayerRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdatePlayerRequest) UnmarshalBinary(b []byte) error {
	var res UpdatePlayerRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
