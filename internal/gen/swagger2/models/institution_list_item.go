// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstitutionListItem institution list item
//
// swagger:model InstitutionListItem
type InstitutionListItem struct {

	// city
	// Required: true
	City string `json:"city"`

	// id
	// Required: true
	ID int32 `json:"id"`

	// logo url
	// Required: true
	LogoURL string `json:"logo_url"`

	// name
	// Required: true
	Name string `json:"name"`

	// short name
	// Required: true
	ShortName string `json:"short_name"`

	// type
	// Required: true
	Type int8 `json:"type"`
}

// Validate validates this institution list item
func (m *InstitutionListItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogoURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstitutionListItem) validateCity(formats strfmt.Registry) error {

	if err := validate.RequiredString("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *InstitutionListItem) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int32(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *InstitutionListItem) validateLogoURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("logo_url", "body", m.LogoURL); err != nil {
		return err
	}

	return nil
}

func (m *InstitutionListItem) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *InstitutionListItem) validateShortName(formats strfmt.Registry) error {

	if err := validate.RequiredString("short_name", "body", m.ShortName); err != nil {
		return err
	}

	return nil
}

func (m *InstitutionListItem) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", int8(m.Type)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this institution list item based on context it is used
func (m *InstitutionListItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InstitutionListItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstitutionListItem) UnmarshalBinary(b []byte) error {
	var res InstitutionListItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
