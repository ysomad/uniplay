// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MostPlayedMap most played map
//
// swagger:model MostPlayedMap
type MostPlayedMap struct {

	// map icon url
	// Required: true
	MapIconURL string `json:"map_icon_url"`

	// map name
	// Required: true
	MapName string `json:"map_name"`

	// played times
	// Required: true
	PlayedTimes int8 `json:"played_times"`
}

// Validate validates this most played map
func (m *MostPlayedMap) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMapIconURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMapName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayedTimes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MostPlayedMap) validateMapIconURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("map_icon_url", "body", m.MapIconURL); err != nil {
		return err
	}

	return nil
}

func (m *MostPlayedMap) validateMapName(formats strfmt.Registry) error {

	if err := validate.RequiredString("map_name", "body", m.MapName); err != nil {
		return err
	}

	return nil
}

func (m *MostPlayedMap) validatePlayedTimes(formats strfmt.Registry) error {

	if err := validate.Required("played_times", "body", int8(m.PlayedTimes)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this most played map based on context it is used
func (m *MostPlayedMap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MostPlayedMap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MostPlayedMap) UnmarshalBinary(b []byte) error {
	var res MostPlayedMap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
