// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MatchTeam match team
//
// swagger:model MatchTeam
type MatchTeam struct {

	// clan name
	ClanName string `json:"clan_name,omitempty"`

	// flag code
	FlagCode string `json:"flag_code,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// score
	Score int32 `json:"score,omitempty"`

	// scoreboard
	Scoreboard []MatchTeamScoreboard `json:"scoreboard"`
}

// Validate validates this match team
func (m *MatchTeam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScoreboard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchTeam) validateScoreboard(formats strfmt.Registry) error {
	if swag.IsZero(m.Scoreboard) { // not required
		return nil
	}

	for i := 0; i < len(m.Scoreboard); i++ {

		if err := m.Scoreboard[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scoreboard" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scoreboard" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this match team based on the context it is used
func (m *MatchTeam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScoreboard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchTeam) contextValidateScoreboard(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Scoreboard); i++ {

		if err := m.Scoreboard[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scoreboard" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scoreboard" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MatchTeam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MatchTeam) UnmarshalBinary(b []byte) error {
	var res MatchTeam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
