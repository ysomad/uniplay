// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Map map
//
// swagger:model Map
type Map struct {

	// icon url
	// Required: true
	IconURL string `json:"icon_url"`

	// id
	// Required: true
	ID int16 `json:"id"`

	// Название карты, например, de_dust2
	// Required: true
	InternalName string `json:"internal_name"`

	// Название карты, например, Cobblestone
	// Required: true
	Name string `json:"name"`
}

// Validate validates this map
func (m *Map) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIconURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Map) validateIconURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("icon_url", "body", m.IconURL); err != nil {
		return err
	}

	return nil
}

func (m *Map) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int16(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Map) validateInternalName(formats strfmt.Registry) error {

	if err := validate.RequiredString("internal_name", "body", m.InternalName); err != nil {
		return err
	}

	return nil
}

func (m *Map) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this map based on context it is used
func (m *Map) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Map) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Map) UnmarshalBinary(b []byte) error {
	var res Map
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
