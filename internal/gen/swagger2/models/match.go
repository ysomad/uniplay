// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Match match
//
// swagger:model Match
type Match struct {

	// duration
	// Required: true
	Duration int64 `json:"duration"`

	// id
	// Required: true
	// Format: uuid
	ID strfmt.UUID `json:"id"`

	// map
	// Required: true
	Map Map `json:"map"`

	// rounds played
	// Required: true
	RoundsPlayed int32 `json:"rounds_played"`

	// team1
	// Required: true
	Team1 MatchTeam `json:"team1"`

	// team2
	// Required: true
	Team2 MatchTeam `json:"team2"`

	// uploaded at
	// Required: true
	// Format: date-time
	UploadedAt strfmt.DateTime `json:"uploaded_at"`
}

// Validate validates this match
func (m *Match) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoundsPlayed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Match) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", int64(m.Duration)); err != nil {
		return err
	}

	return nil
}

func (m *Match) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Match) validateMap(formats strfmt.Registry) error {

	if err := m.Map.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("map")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("map")
		}
		return err
	}

	return nil
}

func (m *Match) validateRoundsPlayed(formats strfmt.Registry) error {

	if err := validate.Required("rounds_played", "body", int32(m.RoundsPlayed)); err != nil {
		return err
	}

	return nil
}

func (m *Match) validateTeam1(formats strfmt.Registry) error {

	if err := m.Team1.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("team1")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("team1")
		}
		return err
	}

	return nil
}

func (m *Match) validateTeam2(formats strfmt.Registry) error {

	if err := m.Team2.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("team2")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("team2")
		}
		return err
	}

	return nil
}

func (m *Match) validateUploadedAt(formats strfmt.Registry) error {

	if err := validate.Required("uploaded_at", "body", strfmt.DateTime(m.UploadedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("uploaded_at", "body", "date-time", m.UploadedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this match based on the context it is used
func (m *Match) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeam1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeam2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Match) contextValidateMap(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Map.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("map")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("map")
		}
		return err
	}

	return nil
}

func (m *Match) contextValidateTeam1(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Team1.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("team1")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("team1")
		}
		return err
	}

	return nil
}

func (m *Match) contextValidateTeam2(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Team2.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("team2")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("team2")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Match) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Match) UnmarshalBinary(b []byte) error {
	var res Match
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
