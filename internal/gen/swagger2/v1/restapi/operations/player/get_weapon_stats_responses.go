// Code generated by go-swagger; DO NOT EDIT.

package player

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/ssssargsian/uniplay/internal/gen/swagger2/v1/models"
)

// GetWeaponStatsOKCode is the HTTP code returned for type GetWeaponStatsOK
const GetWeaponStatsOKCode int = 200

/*
GetWeaponStatsOK OK

swagger:response getWeaponStatsOK
*/
type GetWeaponStatsOK struct {

	/*
	  In: Body
	*/
	Payload models.PlayerWeaponStats `json:"body,omitempty"`
}

// NewGetWeaponStatsOK creates GetWeaponStatsOK with default headers values
func NewGetWeaponStatsOK() *GetWeaponStatsOK {

	return &GetWeaponStatsOK{}
}

// WithPayload adds the payload to the get weapon stats o k response
func (o *GetWeaponStatsOK) WithPayload(payload models.PlayerWeaponStats) *GetWeaponStatsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get weapon stats o k response
func (o *GetWeaponStatsOK) SetPayload(payload models.PlayerWeaponStats) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWeaponStatsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.PlayerWeaponStats{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (o *GetWeaponStatsOK) GetWeaponStatsResponder() {}

// GetWeaponStatsNotFoundCode is the HTTP code returned for type GetWeaponStatsNotFound
const GetWeaponStatsNotFoundCode int = 404

/*
GetWeaponStatsNotFound Not Found

swagger:response getWeaponStatsNotFound
*/
type GetWeaponStatsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetWeaponStatsNotFound creates GetWeaponStatsNotFound with default headers values
func NewGetWeaponStatsNotFound() *GetWeaponStatsNotFound {

	return &GetWeaponStatsNotFound{}
}

// WithPayload adds the payload to the get weapon stats not found response
func (o *GetWeaponStatsNotFound) WithPayload(payload *models.Error) *GetWeaponStatsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get weapon stats not found response
func (o *GetWeaponStatsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWeaponStatsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetWeaponStatsNotFound) GetWeaponStatsResponder() {}

// GetWeaponStatsInternalServerErrorCode is the HTTP code returned for type GetWeaponStatsInternalServerError
const GetWeaponStatsInternalServerErrorCode int = 500

/*
GetWeaponStatsInternalServerError Internal Server Error

swagger:response getWeaponStatsInternalServerError
*/
type GetWeaponStatsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetWeaponStatsInternalServerError creates GetWeaponStatsInternalServerError with default headers values
func NewGetWeaponStatsInternalServerError() *GetWeaponStatsInternalServerError {

	return &GetWeaponStatsInternalServerError{}
}

// WithPayload adds the payload to the get weapon stats internal server error response
func (o *GetWeaponStatsInternalServerError) WithPayload(payload *models.Error) *GetWeaponStatsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get weapon stats internal server error response
func (o *GetWeaponStatsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWeaponStatsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetWeaponStatsInternalServerError) GetWeaponStatsResponder() {}

type GetWeaponStatsNotImplementedResponder struct {
	middleware.Responder
}

func (*GetWeaponStatsNotImplementedResponder) GetWeaponStatsResponder() {}

func GetWeaponStatsNotImplemented() GetWeaponStatsResponder {
	return &GetWeaponStatsNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.GetWeaponStats has not yet been implemented",
		),
	}
}

type GetWeaponStatsResponder interface {
	middleware.Responder
	GetWeaponStatsResponder()
}
