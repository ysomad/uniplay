// Code generated by go-swagger; DO NOT EDIT.

package replay

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
)

// UploadReplayMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var UploadReplayMaxParseMemory int64 = 32 << 20

// NewUploadReplayParams creates a new UploadReplayParams object
//
// There are no default values defined in the spec.
func NewUploadReplayParams() UploadReplayParams {

	return UploadReplayParams{}
}

// UploadReplayParams contains all the bound params for the upload replay operation
// typically these are obtained from a http.Request
//
// swagger:parameters uploadReplay
type UploadReplayParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*файл записи матча с расширением .dem
	  Required: true
	  In: formData
	*/
	Replay io.ReadCloser
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUploadReplayParams() beforehand.
func (o *UploadReplayParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(UploadReplayMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}

	replay, replayHeader, err := r.FormFile("replay")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "replay", err))
	} else if err := o.bindReplay(replay, replayHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.Replay = &runtime.File{Data: replay, Header: replayHeader}
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindReplay binds file parameter Replay.
//
// The only supported validations on files are MinLength and MaxLength
func (o *UploadReplayParams) bindReplay(file multipart.File, header *multipart.FileHeader) error {
	return nil
}
