// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplayTeam replay team
//
// swagger:model ReplayTeam
type ReplayTeam struct {

	// название команды, берется из загруженной записи матча
	// Required: true
	ClanName string `json:"clan_name"`

	// ISO 3166 код флага
	// Required: true
	FlagCode string `json:"flag_code"`

	// list of player steam ids
	// Required: true
	Players []string `json:"players"`

	// score
	// Required: true
	Score int32 `json:"score"`
}

// Validate validates this replay team
func (m *ReplayTeam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClanName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlagCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplayTeam) validateClanName(formats strfmt.Registry) error {

	if err := validate.RequiredString("clan_name", "body", m.ClanName); err != nil {
		return err
	}

	return nil
}

func (m *ReplayTeam) validateFlagCode(formats strfmt.Registry) error {

	if err := validate.RequiredString("flag_code", "body", m.FlagCode); err != nil {
		return err
	}

	return nil
}

func (m *ReplayTeam) validatePlayers(formats strfmt.Registry) error {

	if err := validate.Required("players", "body", m.Players); err != nil {
		return err
	}

	return nil
}

func (m *ReplayTeam) validateScore(formats strfmt.Registry) error {

	if err := validate.Required("score", "body", int32(m.Score)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this replay team based on context it is used
func (m *ReplayTeam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReplayTeam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplayTeam) UnmarshalBinary(b []byte) error {
	var res ReplayTeam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
