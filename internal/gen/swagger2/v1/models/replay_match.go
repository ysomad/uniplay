// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplayMatch replay match
//
// swagger:model ReplayMatch
type ReplayMatch struct {

	// map name
	// Required: true
	MapName string `json:"map_name"`

	// match duration
	// Required: true
	MatchDuration int64 `json:"match_duration"`

	// match id
	// Required: true
	// Format: uuid
	MatchID strfmt.UUID `json:"match_id"`

	// team1
	// Required: true
	Team1 *ReplayTeam `json:"team1"`

	// team2
	// Required: true
	Team2 *ReplayTeam `json:"team2"`

	// datetime RFC3339
	// Required: true
	// Format: date-time
	UploadedAt strfmt.DateTime `json:"uploaded_at"`
}

// Validate validates this replay match
func (m *ReplayMatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMapName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplayMatch) validateMapName(formats strfmt.Registry) error {

	if err := validate.RequiredString("map_name", "body", m.MapName); err != nil {
		return err
	}

	return nil
}

func (m *ReplayMatch) validateMatchDuration(formats strfmt.Registry) error {

	if err := validate.Required("match_duration", "body", int64(m.MatchDuration)); err != nil {
		return err
	}

	return nil
}

func (m *ReplayMatch) validateMatchID(formats strfmt.Registry) error {

	if err := validate.Required("match_id", "body", strfmt.UUID(m.MatchID)); err != nil {
		return err
	}

	if err := validate.FormatOf("match_id", "body", "uuid", m.MatchID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReplayMatch) validateTeam1(formats strfmt.Registry) error {

	if err := validate.Required("team1", "body", m.Team1); err != nil {
		return err
	}

	if m.Team1 != nil {
		if err := m.Team1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("team1")
			}
			return err
		}
	}

	return nil
}

func (m *ReplayMatch) validateTeam2(formats strfmt.Registry) error {

	if err := validate.Required("team2", "body", m.Team2); err != nil {
		return err
	}

	if m.Team2 != nil {
		if err := m.Team2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("team2")
			}
			return err
		}
	}

	return nil
}

func (m *ReplayMatch) validateUploadedAt(formats strfmt.Registry) error {

	if err := validate.Required("uploaded_at", "body", strfmt.DateTime(m.UploadedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("uploaded_at", "body", "date-time", m.UploadedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this replay match based on the context it is used
func (m *ReplayMatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTeam1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeam2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplayMatch) contextValidateTeam1(ctx context.Context, formats strfmt.Registry) error {

	if m.Team1 != nil {
		if err := m.Team1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("team1")
			}
			return err
		}
	}

	return nil
}

func (m *ReplayMatch) contextValidateTeam2(ctx context.Context, formats strfmt.Registry) error {

	if m.Team2 != nil {
		if err := m.Team2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("team2")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplayMatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplayMatch) UnmarshalBinary(b []byte) error {
	var res ReplayMatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
