// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlayerWeaponStatsInnerAccuracyStats player weapon stats inner accuracy stats
//
// swagger:model PlayerWeaponStats_inner_accuracy_stats
type PlayerWeaponStatsInnerAccuracyStats struct {

	// arms
	// Required: true
	Arms *float64 `json:"arms"`

	// chest
	// Required: true
	Chest *float64 `json:"chest"`

	// head
	// Required: true
	Head *float64 `json:"head"`

	// legs
	// Required: true
	Legs *float64 `json:"legs"`

	// stomach
	// Required: true
	Stomach *float64 `json:"stomach"`

	// total
	// Required: true
	Total *float64 `json:"total"`
}

// Validate validates this player weapon stats inner accuracy stats
func (m *PlayerWeaponStatsInnerAccuracyStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLegs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStomach(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlayerWeaponStatsInnerAccuracyStats) validateArms(formats strfmt.Registry) error {

	if err := validate.Required("arms", "body", m.Arms); err != nil {
		return err
	}

	return nil
}

func (m *PlayerWeaponStatsInnerAccuracyStats) validateChest(formats strfmt.Registry) error {

	if err := validate.Required("chest", "body", m.Chest); err != nil {
		return err
	}

	return nil
}

func (m *PlayerWeaponStatsInnerAccuracyStats) validateHead(formats strfmt.Registry) error {

	if err := validate.Required("head", "body", m.Head); err != nil {
		return err
	}

	return nil
}

func (m *PlayerWeaponStatsInnerAccuracyStats) validateLegs(formats strfmt.Registry) error {

	if err := validate.Required("legs", "body", m.Legs); err != nil {
		return err
	}

	return nil
}

func (m *PlayerWeaponStatsInnerAccuracyStats) validateStomach(formats strfmt.Registry) error {

	if err := validate.Required("stomach", "body", m.Stomach); err != nil {
		return err
	}

	return nil
}

func (m *PlayerWeaponStatsInnerAccuracyStats) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this player weapon stats inner accuracy stats based on context it is used
func (m *PlayerWeaponStatsInnerAccuracyStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PlayerWeaponStatsInnerAccuracyStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlayerWeaponStatsInnerAccuracyStats) UnmarshalBinary(b []byte) error {
	var res PlayerWeaponStatsInnerAccuracyStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
