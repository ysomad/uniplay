// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlayerWeaponStatsInner player weapon stats inner
//
// swagger:model PlayerWeaponStats_inner
type PlayerWeaponStatsInner struct {

	// accuracy stats
	// Required: true
	AccuracyStats PlayerWeaponStatsInnerAccuracyStats `json:"accuracy_stats"`

	// total stats
	// Required: true
	TotalStats *PlayerWeaponStatsInnerTotalStats `json:"total_stats"`
}

// Validate validates this player weapon stats inner
func (m *PlayerWeaponStatsInner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccuracyStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlayerWeaponStatsInner) validateAccuracyStats(formats strfmt.Registry) error {

	if err := m.AccuracyStats.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accuracy_stats")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("accuracy_stats")
		}
		return err
	}

	return nil
}

func (m *PlayerWeaponStatsInner) validateTotalStats(formats strfmt.Registry) error {

	if err := validate.Required("total_stats", "body", m.TotalStats); err != nil {
		return err
	}

	if m.TotalStats != nil {
		if err := m.TotalStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("total_stats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this player weapon stats inner based on the context it is used
func (m *PlayerWeaponStatsInner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccuracyStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlayerWeaponStatsInner) contextValidateAccuracyStats(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AccuracyStats.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accuracy_stats")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("accuracy_stats")
		}
		return err
	}

	return nil
}

func (m *PlayerWeaponStatsInner) contextValidateTotalStats(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalStats != nil {
		if err := m.TotalStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("total_stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlayerWeaponStatsInner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlayerWeaponStatsInner) UnmarshalBinary(b []byte) error {
	var res PlayerWeaponStatsInner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
