// Code generated by go-swagger; DO NOT EDIT.

package institution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetInstitutionsParams creates a new GetInstitutionsParams object
//
// There are no default values defined in the spec.
func NewGetInstitutionsParams() GetInstitutionsParams {

	return GetInstitutionsParams{}
}

// GetInstitutionsParams contains all the bound params for the get institutions operation
// typically these are obtained from a http.Request
//
// swagger:parameters getInstitutions
type GetInstitutionsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Идентификатор последнего значения на странице. Оставьте это поле пустым при выполнении первого запроса. Чтобы получить следующие значения, укажите last_id из ответа предыдущего запроса.
	  In: query
	*/
	LastID *int32
	/*Количество значений на странице. Минимум — 1, максимум — 500.
	  In: query
	*/
	PageSize *int32
	/*Фильтр по сокращенному имени уч. заведения, например, НАТК
	  In: query
	*/
	ShortName *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetInstitutionsParams() beforehand.
func (o *GetInstitutionsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLastID, qhkLastID, _ := qs.GetOK("last_id")
	if err := o.bindLastID(qLastID, qhkLastID, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageSize, qhkPageSize, _ := qs.GetOK("page_size")
	if err := o.bindPageSize(qPageSize, qhkPageSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qShortName, qhkShortName, _ := qs.GetOK("short_name")
	if err := o.bindShortName(qShortName, qhkShortName, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLastID binds and validates parameter LastID from query.
func (o *GetInstitutionsParams) bindLastID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("last_id", "query", "int32", raw)
	}
	o.LastID = &value

	return nil
}

// bindPageSize binds and validates parameter PageSize from query.
func (o *GetInstitutionsParams) bindPageSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("page_size", "query", "int32", raw)
	}
	o.PageSize = &value

	return nil
}

// bindShortName binds and validates parameter ShortName from query.
func (o *GetInstitutionsParams) bindShortName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ShortName = &raw

	return nil
}
