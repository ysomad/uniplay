// Code generated by go-swagger; DO NOT EDIT.

package player

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdatePlayerHandlerFunc turns a function with the right signature into a update player handler
type UpdatePlayerHandlerFunc func(UpdatePlayerParams) UpdatePlayerResponder

// Handle executing the request and returning a response
func (fn UpdatePlayerHandlerFunc) Handle(params UpdatePlayerParams) UpdatePlayerResponder {
	return fn(params)
}

// UpdatePlayerHandler interface for that can handle valid update player params
type UpdatePlayerHandler interface {
	Handle(UpdatePlayerParams) UpdatePlayerResponder
}

// NewUpdatePlayer creates a new http.Handler for the update player operation
func NewUpdatePlayer(ctx *middleware.Context, handler UpdatePlayerHandler) *UpdatePlayer {
	return &UpdatePlayer{Context: ctx, Handler: handler}
}

/*
	UpdatePlayer swagger:route PUT /players/{steam_id} player updatePlayer

Редактирование информации об игроке
*/
type UpdatePlayer struct {
	Context *middleware.Context
	Handler UpdatePlayerHandler
}

func (o *UpdatePlayer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdatePlayerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
