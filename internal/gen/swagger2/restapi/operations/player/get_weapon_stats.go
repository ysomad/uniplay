// Code generated by go-swagger; DO NOT EDIT.

package player

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetWeaponStatsHandlerFunc turns a function with the right signature into a get weapon stats handler
type GetWeaponStatsHandlerFunc func(GetWeaponStatsParams) GetWeaponStatsResponder

// Handle executing the request and returning a response
func (fn GetWeaponStatsHandlerFunc) Handle(params GetWeaponStatsParams) GetWeaponStatsResponder {
	return fn(params)
}

// GetWeaponStatsHandler interface for that can handle valid get weapon stats params
type GetWeaponStatsHandler interface {
	Handle(GetWeaponStatsParams) GetWeaponStatsResponder
}

// NewGetWeaponStats creates a new http.Handler for the get weapon stats operation
func NewGetWeaponStats(ctx *middleware.Context, handler GetWeaponStatsHandler) *GetWeaponStats {
	return &GetWeaponStats{Context: ctx, Handler: handler}
}

/*
	GetWeaponStats swagger:route GET /players/{steam_id}/weapon-stats player getWeaponStats

Получение статистики игрока по оружию
*/
type GetWeaponStats struct {
	Context *middleware.Context
	Handler GetWeaponStatsHandler
}

func (o *GetWeaponStats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetWeaponStatsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
