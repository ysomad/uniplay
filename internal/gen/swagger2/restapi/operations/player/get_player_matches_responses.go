// Code generated by go-swagger; DO NOT EDIT.

package player

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/ysomad/uniplay/internal/gen/swagger2/models"
)

// GetPlayerMatchesOKCode is the HTTP code returned for type GetPlayerMatchesOK
const GetPlayerMatchesOKCode int = 200

/*
GetPlayerMatchesOK OK

swagger:response getPlayerMatchesOK
*/
type GetPlayerMatchesOK struct {

	/*
	  In: Body
	*/
	Payload *models.PlayerStats `json:"body,omitempty"`
}

// NewGetPlayerMatchesOK creates GetPlayerMatchesOK with default headers values
func NewGetPlayerMatchesOK() *GetPlayerMatchesOK {

	return &GetPlayerMatchesOK{}
}

// WithPayload adds the payload to the get player matches o k response
func (o *GetPlayerMatchesOK) WithPayload(payload *models.PlayerStats) *GetPlayerMatchesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get player matches o k response
func (o *GetPlayerMatchesOK) SetPayload(payload *models.PlayerStats) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPlayerMatchesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetPlayerMatchesOK) GetPlayerMatchesResponder() {}

// GetPlayerMatchesBadRequestCode is the HTTP code returned for type GetPlayerMatchesBadRequest
const GetPlayerMatchesBadRequestCode int = 400

/*
GetPlayerMatchesBadRequest Bad Request

swagger:response getPlayerMatchesBadRequest
*/
type GetPlayerMatchesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPlayerMatchesBadRequest creates GetPlayerMatchesBadRequest with default headers values
func NewGetPlayerMatchesBadRequest() *GetPlayerMatchesBadRequest {

	return &GetPlayerMatchesBadRequest{}
}

// WithPayload adds the payload to the get player matches bad request response
func (o *GetPlayerMatchesBadRequest) WithPayload(payload *models.Error) *GetPlayerMatchesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get player matches bad request response
func (o *GetPlayerMatchesBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPlayerMatchesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetPlayerMatchesBadRequest) GetPlayerMatchesResponder() {}

// GetPlayerMatchesNotFoundCode is the HTTP code returned for type GetPlayerMatchesNotFound
const GetPlayerMatchesNotFoundCode int = 404

/*
GetPlayerMatchesNotFound Not Found

swagger:response getPlayerMatchesNotFound
*/
type GetPlayerMatchesNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPlayerMatchesNotFound creates GetPlayerMatchesNotFound with default headers values
func NewGetPlayerMatchesNotFound() *GetPlayerMatchesNotFound {

	return &GetPlayerMatchesNotFound{}
}

// WithPayload adds the payload to the get player matches not found response
func (o *GetPlayerMatchesNotFound) WithPayload(payload *models.Error) *GetPlayerMatchesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get player matches not found response
func (o *GetPlayerMatchesNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPlayerMatchesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetPlayerMatchesNotFound) GetPlayerMatchesResponder() {}

// GetPlayerMatchesInternalServerErrorCode is the HTTP code returned for type GetPlayerMatchesInternalServerError
const GetPlayerMatchesInternalServerErrorCode int = 500

/*
GetPlayerMatchesInternalServerError Internal Server Error

swagger:response getPlayerMatchesInternalServerError
*/
type GetPlayerMatchesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPlayerMatchesInternalServerError creates GetPlayerMatchesInternalServerError with default headers values
func NewGetPlayerMatchesInternalServerError() *GetPlayerMatchesInternalServerError {

	return &GetPlayerMatchesInternalServerError{}
}

// WithPayload adds the payload to the get player matches internal server error response
func (o *GetPlayerMatchesInternalServerError) WithPayload(payload *models.Error) *GetPlayerMatchesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get player matches internal server error response
func (o *GetPlayerMatchesInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPlayerMatchesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

func (o *GetPlayerMatchesInternalServerError) GetPlayerMatchesResponder() {}

type GetPlayerMatchesNotImplementedResponder struct {
	middleware.Responder
}

func (*GetPlayerMatchesNotImplementedResponder) GetPlayerMatchesResponder() {}

func GetPlayerMatchesNotImplemented() GetPlayerMatchesResponder {
	return &GetPlayerMatchesNotImplementedResponder{
		middleware.NotImplemented(
			"operation authentication.GetPlayerMatches has not yet been implemented",
		),
	}
}

type GetPlayerMatchesResponder interface {
	middleware.Responder
	GetPlayerMatchesResponder()
}
