// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SetTeamCaptainHandlerFunc turns a function with the right signature into a set team captain handler
type SetTeamCaptainHandlerFunc func(SetTeamCaptainParams) SetTeamCaptainResponder

// Handle executing the request and returning a response
func (fn SetTeamCaptainHandlerFunc) Handle(params SetTeamCaptainParams) SetTeamCaptainResponder {
	return fn(params)
}

// SetTeamCaptainHandler interface for that can handle valid set team captain params
type SetTeamCaptainHandler interface {
	Handle(SetTeamCaptainParams) SetTeamCaptainResponder
}

// NewSetTeamCaptain creates a new http.Handler for the set team captain operation
func NewSetTeamCaptain(ctx *middleware.Context, handler SetTeamCaptainHandler) *SetTeamCaptain {
	return &SetTeamCaptain{Context: ctx, Handler: handler}
}

/*
	SetTeamCaptain swagger:route POST /teams/{team_id}/players/{steam_id}/captain team setTeamCaptain

Назначить игрока капитаном команды
*/
type SetTeamCaptain struct {
	Context *middleware.Context
	Handler SetTeamCaptainHandler
}

func (o *SetTeamCaptain) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSetTeamCaptainParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
