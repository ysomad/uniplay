// Code generated by go-swagger; DO NOT EDIT.

package replay

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UploadReplayHandlerFunc turns a function with the right signature into a upload replay handler
type UploadReplayHandlerFunc func(UploadReplayParams) UploadReplayResponder

// Handle executing the request and returning a response
func (fn UploadReplayHandlerFunc) Handle(params UploadReplayParams) UploadReplayResponder {
	return fn(params)
}

// UploadReplayHandler interface for that can handle valid upload replay params
type UploadReplayHandler interface {
	Handle(UploadReplayParams) UploadReplayResponder
}

// NewUploadReplay creates a new http.Handler for the upload replay operation
func NewUploadReplay(ctx *middleware.Context, handler UploadReplayHandler) *UploadReplay {
	return &UploadReplay{Context: ctx, Handler: handler}
}

/*
	UploadReplay swagger:route POST /replays replay uploadReplay

Загрузка записи матча
*/
type UploadReplay struct {
	Context *middleware.Context
	Handler UploadReplayHandler
}

func (o *UploadReplay) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUploadReplayParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
