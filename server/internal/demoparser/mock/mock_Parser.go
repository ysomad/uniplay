// Code generated by mockery v2.39.1. DO NOT EDIT.

package demoinfocs

import (
	demoinfocs "github.com/markus-wa/demoinfocs-golang/v4/pkg/demoinfocs"
	common "github.com/markus-wa/demoinfocs-golang/v4/pkg/demoinfocs/common"

	dispatch "github.com/markus-wa/godispatch"

	mock "github.com/stretchr/testify/mock"

	sendtables "github.com/markus-wa/demoinfocs-golang/v4/pkg/demoinfocs/sendtables"

	time "time"
)

// MockParser is an autogenerated mock type for the Parser type
type MockParser struct {
	mock.Mock
}

type MockParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockParser) EXPECT() *MockParser_Expecter {
	return &MockParser_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with given fields:
func (_m *MockParser) Cancel() {
	_m.Called()
}

// MockParser_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type MockParser_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
func (_e *MockParser_Expecter) Cancel() *MockParser_Cancel_Call {
	return &MockParser_Cancel_Call{Call: _e.mock.On("Cancel")}
}

func (_c *MockParser_Cancel_Call) Run(run func()) *MockParser_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_Cancel_Call) Return() *MockParser_Cancel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParser_Cancel_Call) RunAndReturn(run func()) *MockParser_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockParser) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockParser_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockParser_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockParser_Expecter) Close() *MockParser_Close_Call {
	return &MockParser_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockParser_Close_Call) Run(run func()) *MockParser_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_Close_Call) Return(_a0 error) *MockParser_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParser_Close_Call) RunAndReturn(run func() error) *MockParser_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentFrame provides a mock function with given fields:
func (_m *MockParser) CurrentFrame() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentFrame")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockParser_CurrentFrame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentFrame'
type MockParser_CurrentFrame_Call struct {
	*mock.Call
}

// CurrentFrame is a helper method to define mock.On call
func (_e *MockParser_Expecter) CurrentFrame() *MockParser_CurrentFrame_Call {
	return &MockParser_CurrentFrame_Call{Call: _e.mock.On("CurrentFrame")}
}

func (_c *MockParser_CurrentFrame_Call) Run(run func()) *MockParser_CurrentFrame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_CurrentFrame_Call) Return(_a0 int) *MockParser_CurrentFrame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParser_CurrentFrame_Call) RunAndReturn(run func() int) *MockParser_CurrentFrame_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentTime provides a mock function with given fields:
func (_m *MockParser) CurrentTime() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentTime")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockParser_CurrentTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentTime'
type MockParser_CurrentTime_Call struct {
	*mock.Call
}

// CurrentTime is a helper method to define mock.On call
func (_e *MockParser_Expecter) CurrentTime() *MockParser_CurrentTime_Call {
	return &MockParser_CurrentTime_Call{Call: _e.mock.On("CurrentTime")}
}

func (_c *MockParser_CurrentTime_Call) Run(run func()) *MockParser_CurrentTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_CurrentTime_Call) Return(_a0 time.Duration) *MockParser_CurrentTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParser_CurrentTime_Call) RunAndReturn(run func() time.Duration) *MockParser_CurrentTime_Call {
	_c.Call.Return(run)
	return _c
}

// GameState provides a mock function with given fields:
func (_m *MockParser) GameState() demoinfocs.GameState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GameState")
	}

	var r0 demoinfocs.GameState
	if rf, ok := ret.Get(0).(func() demoinfocs.GameState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(demoinfocs.GameState)
		}
	}

	return r0
}

// MockParser_GameState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GameState'
type MockParser_GameState_Call struct {
	*mock.Call
}

// GameState is a helper method to define mock.On call
func (_e *MockParser_Expecter) GameState() *MockParser_GameState_Call {
	return &MockParser_GameState_Call{Call: _e.mock.On("GameState")}
}

func (_c *MockParser_GameState_Call) Run(run func()) *MockParser_GameState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_GameState_Call) Return(_a0 demoinfocs.GameState) *MockParser_GameState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParser_GameState_Call) RunAndReturn(run func() demoinfocs.GameState) *MockParser_GameState_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with given fields:
func (_m *MockParser) Header() common.DemoHeader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 common.DemoHeader
	if rf, ok := ret.Get(0).(func() common.DemoHeader); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.DemoHeader)
	}

	return r0
}

// MockParser_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type MockParser_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *MockParser_Expecter) Header() *MockParser_Header_Call {
	return &MockParser_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *MockParser_Header_Call) Run(run func()) *MockParser_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_Header_Call) Return(_a0 common.DemoHeader) *MockParser_Header_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParser_Header_Call) RunAndReturn(run func() common.DemoHeader) *MockParser_Header_Call {
	_c.Call.Return(run)
	return _c
}

// ParseHeader provides a mock function with given fields:
func (_m *MockParser) ParseHeader() (common.DemoHeader, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParseHeader")
	}

	var r0 common.DemoHeader
	var r1 error
	if rf, ok := ret.Get(0).(func() (common.DemoHeader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() common.DemoHeader); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.DemoHeader)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockParser_ParseHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseHeader'
type MockParser_ParseHeader_Call struct {
	*mock.Call
}

// ParseHeader is a helper method to define mock.On call
func (_e *MockParser_Expecter) ParseHeader() *MockParser_ParseHeader_Call {
	return &MockParser_ParseHeader_Call{Call: _e.mock.On("ParseHeader")}
}

func (_c *MockParser_ParseHeader_Call) Run(run func()) *MockParser_ParseHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_ParseHeader_Call) Return(_a0 common.DemoHeader, _a1 error) *MockParser_ParseHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockParser_ParseHeader_Call) RunAndReturn(run func() (common.DemoHeader, error)) *MockParser_ParseHeader_Call {
	_c.Call.Return(run)
	return _c
}

// ParseNextFrame provides a mock function with given fields:
func (_m *MockParser) ParseNextFrame() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParseNextFrame")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockParser_ParseNextFrame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseNextFrame'
type MockParser_ParseNextFrame_Call struct {
	*mock.Call
}

// ParseNextFrame is a helper method to define mock.On call
func (_e *MockParser_Expecter) ParseNextFrame() *MockParser_ParseNextFrame_Call {
	return &MockParser_ParseNextFrame_Call{Call: _e.mock.On("ParseNextFrame")}
}

func (_c *MockParser_ParseNextFrame_Call) Run(run func()) *MockParser_ParseNextFrame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_ParseNextFrame_Call) Return(moreFrames bool, err error) *MockParser_ParseNextFrame_Call {
	_c.Call.Return(moreFrames, err)
	return _c
}

func (_c *MockParser_ParseNextFrame_Call) RunAndReturn(run func() (bool, error)) *MockParser_ParseNextFrame_Call {
	_c.Call.Return(run)
	return _c
}

// ParseToEnd provides a mock function with given fields:
func (_m *MockParser) ParseToEnd() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParseToEnd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockParser_ParseToEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseToEnd'
type MockParser_ParseToEnd_Call struct {
	*mock.Call
}

// ParseToEnd is a helper method to define mock.On call
func (_e *MockParser_Expecter) ParseToEnd() *MockParser_ParseToEnd_Call {
	return &MockParser_ParseToEnd_Call{Call: _e.mock.On("ParseToEnd")}
}

func (_c *MockParser_ParseToEnd_Call) Run(run func()) *MockParser_ParseToEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_ParseToEnd_Call) Return(err error) *MockParser_ParseToEnd_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockParser_ParseToEnd_Call) RunAndReturn(run func() error) *MockParser_ParseToEnd_Call {
	_c.Call.Return(run)
	return _c
}

// Progress provides a mock function with given fields:
func (_m *MockParser) Progress() float32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Progress")
	}

	var r0 float32
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	return r0
}

// MockParser_Progress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Progress'
type MockParser_Progress_Call struct {
	*mock.Call
}

// Progress is a helper method to define mock.On call
func (_e *MockParser_Expecter) Progress() *MockParser_Progress_Call {
	return &MockParser_Progress_Call{Call: _e.mock.On("Progress")}
}

func (_c *MockParser_Progress_Call) Run(run func()) *MockParser_Progress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_Progress_Call) Return(_a0 float32) *MockParser_Progress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParser_Progress_Call) RunAndReturn(run func() float32) *MockParser_Progress_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterEventHandler provides a mock function with given fields: handler
func (_m *MockParser) RegisterEventHandler(handler interface{}) dispatch.HandlerIdentifier {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for RegisterEventHandler")
	}

	var r0 dispatch.HandlerIdentifier
	if rf, ok := ret.Get(0).(func(interface{}) dispatch.HandlerIdentifier); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dispatch.HandlerIdentifier)
		}
	}

	return r0
}

// MockParser_RegisterEventHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterEventHandler'
type MockParser_RegisterEventHandler_Call struct {
	*mock.Call
}

// RegisterEventHandler is a helper method to define mock.On call
//   - handler interface{}
func (_e *MockParser_Expecter) RegisterEventHandler(handler interface{}) *MockParser_RegisterEventHandler_Call {
	return &MockParser_RegisterEventHandler_Call{Call: _e.mock.On("RegisterEventHandler", handler)}
}

func (_c *MockParser_RegisterEventHandler_Call) Run(run func(handler interface{})) *MockParser_RegisterEventHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockParser_RegisterEventHandler_Call) Return(_a0 dispatch.HandlerIdentifier) *MockParser_RegisterEventHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParser_RegisterEventHandler_Call) RunAndReturn(run func(interface{}) dispatch.HandlerIdentifier) *MockParser_RegisterEventHandler_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterNetMessageHandler provides a mock function with given fields: handler
func (_m *MockParser) RegisterNetMessageHandler(handler interface{}) dispatch.HandlerIdentifier {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for RegisterNetMessageHandler")
	}

	var r0 dispatch.HandlerIdentifier
	if rf, ok := ret.Get(0).(func(interface{}) dispatch.HandlerIdentifier); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dispatch.HandlerIdentifier)
		}
	}

	return r0
}

// MockParser_RegisterNetMessageHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterNetMessageHandler'
type MockParser_RegisterNetMessageHandler_Call struct {
	*mock.Call
}

// RegisterNetMessageHandler is a helper method to define mock.On call
//   - handler interface{}
func (_e *MockParser_Expecter) RegisterNetMessageHandler(handler interface{}) *MockParser_RegisterNetMessageHandler_Call {
	return &MockParser_RegisterNetMessageHandler_Call{Call: _e.mock.On("RegisterNetMessageHandler", handler)}
}

func (_c *MockParser_RegisterNetMessageHandler_Call) Run(run func(handler interface{})) *MockParser_RegisterNetMessageHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockParser_RegisterNetMessageHandler_Call) Return(_a0 dispatch.HandlerIdentifier) *MockParser_RegisterNetMessageHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParser_RegisterNetMessageHandler_Call) RunAndReturn(run func(interface{}) dispatch.HandlerIdentifier) *MockParser_RegisterNetMessageHandler_Call {
	_c.Call.Return(run)
	return _c
}

// ServerClasses provides a mock function with given fields:
func (_m *MockParser) ServerClasses() sendtables.ServerClasses {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerClasses")
	}

	var r0 sendtables.ServerClasses
	if rf, ok := ret.Get(0).(func() sendtables.ServerClasses); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sendtables.ServerClasses)
		}
	}

	return r0
}

// MockParser_ServerClasses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerClasses'
type MockParser_ServerClasses_Call struct {
	*mock.Call
}

// ServerClasses is a helper method to define mock.On call
func (_e *MockParser_Expecter) ServerClasses() *MockParser_ServerClasses_Call {
	return &MockParser_ServerClasses_Call{Call: _e.mock.On("ServerClasses")}
}

func (_c *MockParser_ServerClasses_Call) Run(run func()) *MockParser_ServerClasses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_ServerClasses_Call) Return(_a0 sendtables.ServerClasses) *MockParser_ServerClasses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParser_ServerClasses_Call) RunAndReturn(run func() sendtables.ServerClasses) *MockParser_ServerClasses_Call {
	_c.Call.Return(run)
	return _c
}

// TickRate provides a mock function with given fields:
func (_m *MockParser) TickRate() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TickRate")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockParser_TickRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TickRate'
type MockParser_TickRate_Call struct {
	*mock.Call
}

// TickRate is a helper method to define mock.On call
func (_e *MockParser_Expecter) TickRate() *MockParser_TickRate_Call {
	return &MockParser_TickRate_Call{Call: _e.mock.On("TickRate")}
}

func (_c *MockParser_TickRate_Call) Run(run func()) *MockParser_TickRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_TickRate_Call) Return(_a0 float64) *MockParser_TickRate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParser_TickRate_Call) RunAndReturn(run func() float64) *MockParser_TickRate_Call {
	_c.Call.Return(run)
	return _c
}

// TickTime provides a mock function with given fields:
func (_m *MockParser) TickTime() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TickTime")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockParser_TickTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TickTime'
type MockParser_TickTime_Call struct {
	*mock.Call
}

// TickTime is a helper method to define mock.On call
func (_e *MockParser_Expecter) TickTime() *MockParser_TickTime_Call {
	return &MockParser_TickTime_Call{Call: _e.mock.On("TickTime")}
}

func (_c *MockParser_TickTime_Call) Run(run func()) *MockParser_TickTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_TickTime_Call) Return(_a0 time.Duration) *MockParser_TickTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParser_TickTime_Call) RunAndReturn(run func() time.Duration) *MockParser_TickTime_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterEventHandler provides a mock function with given fields: identifier
func (_m *MockParser) UnregisterEventHandler(identifier dispatch.HandlerIdentifier) {
	_m.Called(identifier)
}

// MockParser_UnregisterEventHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterEventHandler'
type MockParser_UnregisterEventHandler_Call struct {
	*mock.Call
}

// UnregisterEventHandler is a helper method to define mock.On call
//   - identifier dispatch.HandlerIdentifier
func (_e *MockParser_Expecter) UnregisterEventHandler(identifier interface{}) *MockParser_UnregisterEventHandler_Call {
	return &MockParser_UnregisterEventHandler_Call{Call: _e.mock.On("UnregisterEventHandler", identifier)}
}

func (_c *MockParser_UnregisterEventHandler_Call) Run(run func(identifier dispatch.HandlerIdentifier)) *MockParser_UnregisterEventHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dispatch.HandlerIdentifier))
	})
	return _c
}

func (_c *MockParser_UnregisterEventHandler_Call) Return() *MockParser_UnregisterEventHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParser_UnregisterEventHandler_Call) RunAndReturn(run func(dispatch.HandlerIdentifier)) *MockParser_UnregisterEventHandler_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterNetMessageHandler provides a mock function with given fields: identifier
func (_m *MockParser) UnregisterNetMessageHandler(identifier dispatch.HandlerIdentifier) {
	_m.Called(identifier)
}

// MockParser_UnregisterNetMessageHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterNetMessageHandler'
type MockParser_UnregisterNetMessageHandler_Call struct {
	*mock.Call
}

// UnregisterNetMessageHandler is a helper method to define mock.On call
//   - identifier dispatch.HandlerIdentifier
func (_e *MockParser_Expecter) UnregisterNetMessageHandler(identifier interface{}) *MockParser_UnregisterNetMessageHandler_Call {
	return &MockParser_UnregisterNetMessageHandler_Call{Call: _e.mock.On("UnregisterNetMessageHandler", identifier)}
}

func (_c *MockParser_UnregisterNetMessageHandler_Call) Run(run func(identifier dispatch.HandlerIdentifier)) *MockParser_UnregisterNetMessageHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dispatch.HandlerIdentifier))
	})
	return _c
}

func (_c *MockParser_UnregisterNetMessageHandler_Call) Return() *MockParser_UnregisterNetMessageHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockParser_UnregisterNetMessageHandler_Call) RunAndReturn(run func(dispatch.HandlerIdentifier)) *MockParser_UnregisterNetMessageHandler_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockParser creates a new instance of MockParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParser {
	mock := &MockParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
