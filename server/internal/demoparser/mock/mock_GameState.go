// Code generated by mockery v2.39.1. DO NOT EDIT.

package demoinfocs

import (
	demoinfocs "github.com/markus-wa/demoinfocs-golang/v4/pkg/demoinfocs"
	common "github.com/markus-wa/demoinfocs-golang/v4/pkg/demoinfocs/common"

	mock "github.com/stretchr/testify/mock"

	sendtables "github.com/markus-wa/demoinfocs-golang/v4/pkg/demoinfocs/sendtables"
)

// MockGameState is an autogenerated mock type for the GameState type
type MockGameState struct {
	mock.Mock
}

type MockGameState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGameState) EXPECT() *MockGameState_Expecter {
	return &MockGameState_Expecter{mock: &_m.Mock}
}

// Bomb provides a mock function with given fields:
func (_m *MockGameState) Bomb() *common.Bomb {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bomb")
	}

	var r0 *common.Bomb
	if rf, ok := ret.Get(0).(func() *common.Bomb); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Bomb)
		}
	}

	return r0
}

// MockGameState_Bomb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bomb'
type MockGameState_Bomb_Call struct {
	*mock.Call
}

// Bomb is a helper method to define mock.On call
func (_e *MockGameState_Expecter) Bomb() *MockGameState_Bomb_Call {
	return &MockGameState_Bomb_Call{Call: _e.mock.On("Bomb")}
}

func (_c *MockGameState_Bomb_Call) Run(run func()) *MockGameState_Bomb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_Bomb_Call) Return(_a0 *common.Bomb) *MockGameState_Bomb_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_Bomb_Call) RunAndReturn(run func() *common.Bomb) *MockGameState_Bomb_Call {
	_c.Call.Return(run)
	return _c
}

// Entities provides a mock function with given fields:
func (_m *MockGameState) Entities() map[int]sendtables.Entity {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Entities")
	}

	var r0 map[int]sendtables.Entity
	if rf, ok := ret.Get(0).(func() map[int]sendtables.Entity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]sendtables.Entity)
		}
	}

	return r0
}

// MockGameState_Entities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Entities'
type MockGameState_Entities_Call struct {
	*mock.Call
}

// Entities is a helper method to define mock.On call
func (_e *MockGameState_Expecter) Entities() *MockGameState_Entities_Call {
	return &MockGameState_Entities_Call{Call: _e.mock.On("Entities")}
}

func (_c *MockGameState_Entities_Call) Run(run func()) *MockGameState_Entities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_Entities_Call) Return(_a0 map[int]sendtables.Entity) *MockGameState_Entities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_Entities_Call) RunAndReturn(run func() map[int]sendtables.Entity) *MockGameState_Entities_Call {
	_c.Call.Return(run)
	return _c
}

// EntityByHandle provides a mock function with given fields: handle
func (_m *MockGameState) EntityByHandle(handle uint64) sendtables.Entity {
	ret := _m.Called(handle)

	if len(ret) == 0 {
		panic("no return value specified for EntityByHandle")
	}

	var r0 sendtables.Entity
	if rf, ok := ret.Get(0).(func(uint64) sendtables.Entity); ok {
		r0 = rf(handle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sendtables.Entity)
		}
	}

	return r0
}

// MockGameState_EntityByHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EntityByHandle'
type MockGameState_EntityByHandle_Call struct {
	*mock.Call
}

// EntityByHandle is a helper method to define mock.On call
//   - handle uint64
func (_e *MockGameState_Expecter) EntityByHandle(handle interface{}) *MockGameState_EntityByHandle_Call {
	return &MockGameState_EntityByHandle_Call{Call: _e.mock.On("EntityByHandle", handle)}
}

func (_c *MockGameState_EntityByHandle_Call) Run(run func(handle uint64)) *MockGameState_EntityByHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockGameState_EntityByHandle_Call) Return(_a0 sendtables.Entity) *MockGameState_EntityByHandle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_EntityByHandle_Call) RunAndReturn(run func(uint64) sendtables.Entity) *MockGameState_EntityByHandle_Call {
	_c.Call.Return(run)
	return _c
}

// GamePhase provides a mock function with given fields:
func (_m *MockGameState) GamePhase() common.GamePhase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GamePhase")
	}

	var r0 common.GamePhase
	if rf, ok := ret.Get(0).(func() common.GamePhase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.GamePhase)
	}

	return r0
}

// MockGameState_GamePhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GamePhase'
type MockGameState_GamePhase_Call struct {
	*mock.Call
}

// GamePhase is a helper method to define mock.On call
func (_e *MockGameState_Expecter) GamePhase() *MockGameState_GamePhase_Call {
	return &MockGameState_GamePhase_Call{Call: _e.mock.On("GamePhase")}
}

func (_c *MockGameState_GamePhase_Call) Run(run func()) *MockGameState_GamePhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_GamePhase_Call) Return(_a0 common.GamePhase) *MockGameState_GamePhase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_GamePhase_Call) RunAndReturn(run func() common.GamePhase) *MockGameState_GamePhase_Call {
	_c.Call.Return(run)
	return _c
}

// GrenadeProjectiles provides a mock function with given fields:
func (_m *MockGameState) GrenadeProjectiles() map[int]*common.GrenadeProjectile {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GrenadeProjectiles")
	}

	var r0 map[int]*common.GrenadeProjectile
	if rf, ok := ret.Get(0).(func() map[int]*common.GrenadeProjectile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]*common.GrenadeProjectile)
		}
	}

	return r0
}

// MockGameState_GrenadeProjectiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrenadeProjectiles'
type MockGameState_GrenadeProjectiles_Call struct {
	*mock.Call
}

// GrenadeProjectiles is a helper method to define mock.On call
func (_e *MockGameState_Expecter) GrenadeProjectiles() *MockGameState_GrenadeProjectiles_Call {
	return &MockGameState_GrenadeProjectiles_Call{Call: _e.mock.On("GrenadeProjectiles")}
}

func (_c *MockGameState_GrenadeProjectiles_Call) Run(run func()) *MockGameState_GrenadeProjectiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_GrenadeProjectiles_Call) Return(_a0 map[int]*common.GrenadeProjectile) *MockGameState_GrenadeProjectiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_GrenadeProjectiles_Call) RunAndReturn(run func() map[int]*common.GrenadeProjectile) *MockGameState_GrenadeProjectiles_Call {
	_c.Call.Return(run)
	return _c
}

// Hostages provides a mock function with given fields:
func (_m *MockGameState) Hostages() []*common.Hostage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hostages")
	}

	var r0 []*common.Hostage
	if rf, ok := ret.Get(0).(func() []*common.Hostage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.Hostage)
		}
	}

	return r0
}

// MockGameState_Hostages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hostages'
type MockGameState_Hostages_Call struct {
	*mock.Call
}

// Hostages is a helper method to define mock.On call
func (_e *MockGameState_Expecter) Hostages() *MockGameState_Hostages_Call {
	return &MockGameState_Hostages_Call{Call: _e.mock.On("Hostages")}
}

func (_c *MockGameState_Hostages_Call) Run(run func()) *MockGameState_Hostages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_Hostages_Call) Return(_a0 []*common.Hostage) *MockGameState_Hostages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_Hostages_Call) RunAndReturn(run func() []*common.Hostage) *MockGameState_Hostages_Call {
	_c.Call.Return(run)
	return _c
}

// Infernos provides a mock function with given fields:
func (_m *MockGameState) Infernos() map[int]*common.Inferno {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Infernos")
	}

	var r0 map[int]*common.Inferno
	if rf, ok := ret.Get(0).(func() map[int]*common.Inferno); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]*common.Inferno)
		}
	}

	return r0
}

// MockGameState_Infernos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infernos'
type MockGameState_Infernos_Call struct {
	*mock.Call
}

// Infernos is a helper method to define mock.On call
func (_e *MockGameState_Expecter) Infernos() *MockGameState_Infernos_Call {
	return &MockGameState_Infernos_Call{Call: _e.mock.On("Infernos")}
}

func (_c *MockGameState_Infernos_Call) Run(run func()) *MockGameState_Infernos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_Infernos_Call) Return(_a0 map[int]*common.Inferno) *MockGameState_Infernos_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_Infernos_Call) RunAndReturn(run func() map[int]*common.Inferno) *MockGameState_Infernos_Call {
	_c.Call.Return(run)
	return _c
}

// IngameTick provides a mock function with given fields:
func (_m *MockGameState) IngameTick() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IngameTick")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockGameState_IngameTick_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IngameTick'
type MockGameState_IngameTick_Call struct {
	*mock.Call
}

// IngameTick is a helper method to define mock.On call
func (_e *MockGameState_Expecter) IngameTick() *MockGameState_IngameTick_Call {
	return &MockGameState_IngameTick_Call{Call: _e.mock.On("IngameTick")}
}

func (_c *MockGameState_IngameTick_Call) Run(run func()) *MockGameState_IngameTick_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_IngameTick_Call) Return(_a0 int) *MockGameState_IngameTick_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_IngameTick_Call) RunAndReturn(run func() int) *MockGameState_IngameTick_Call {
	_c.Call.Return(run)
	return _c
}

// IsFreezetimePeriod provides a mock function with given fields:
func (_m *MockGameState) IsFreezetimePeriod() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsFreezetimePeriod")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockGameState_IsFreezetimePeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFreezetimePeriod'
type MockGameState_IsFreezetimePeriod_Call struct {
	*mock.Call
}

// IsFreezetimePeriod is a helper method to define mock.On call
func (_e *MockGameState_Expecter) IsFreezetimePeriod() *MockGameState_IsFreezetimePeriod_Call {
	return &MockGameState_IsFreezetimePeriod_Call{Call: _e.mock.On("IsFreezetimePeriod")}
}

func (_c *MockGameState_IsFreezetimePeriod_Call) Run(run func()) *MockGameState_IsFreezetimePeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_IsFreezetimePeriod_Call) Return(_a0 bool) *MockGameState_IsFreezetimePeriod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_IsFreezetimePeriod_Call) RunAndReturn(run func() bool) *MockGameState_IsFreezetimePeriod_Call {
	_c.Call.Return(run)
	return _c
}

// IsMatchStarted provides a mock function with given fields:
func (_m *MockGameState) IsMatchStarted() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsMatchStarted")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockGameState_IsMatchStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMatchStarted'
type MockGameState_IsMatchStarted_Call struct {
	*mock.Call
}

// IsMatchStarted is a helper method to define mock.On call
func (_e *MockGameState_Expecter) IsMatchStarted() *MockGameState_IsMatchStarted_Call {
	return &MockGameState_IsMatchStarted_Call{Call: _e.mock.On("IsMatchStarted")}
}

func (_c *MockGameState_IsMatchStarted_Call) Run(run func()) *MockGameState_IsMatchStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_IsMatchStarted_Call) Return(_a0 bool) *MockGameState_IsMatchStarted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_IsMatchStarted_Call) RunAndReturn(run func() bool) *MockGameState_IsMatchStarted_Call {
	_c.Call.Return(run)
	return _c
}

// IsWarmupPeriod provides a mock function with given fields:
func (_m *MockGameState) IsWarmupPeriod() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsWarmupPeriod")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockGameState_IsWarmupPeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsWarmupPeriod'
type MockGameState_IsWarmupPeriod_Call struct {
	*mock.Call
}

// IsWarmupPeriod is a helper method to define mock.On call
func (_e *MockGameState_Expecter) IsWarmupPeriod() *MockGameState_IsWarmupPeriod_Call {
	return &MockGameState_IsWarmupPeriod_Call{Call: _e.mock.On("IsWarmupPeriod")}
}

func (_c *MockGameState_IsWarmupPeriod_Call) Run(run func()) *MockGameState_IsWarmupPeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_IsWarmupPeriod_Call) Return(_a0 bool) *MockGameState_IsWarmupPeriod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_IsWarmupPeriod_Call) RunAndReturn(run func() bool) *MockGameState_IsWarmupPeriod_Call {
	_c.Call.Return(run)
	return _c
}

// OvertimeCount provides a mock function with given fields:
func (_m *MockGameState) OvertimeCount() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OvertimeCount")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockGameState_OvertimeCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OvertimeCount'
type MockGameState_OvertimeCount_Call struct {
	*mock.Call
}

// OvertimeCount is a helper method to define mock.On call
func (_e *MockGameState_Expecter) OvertimeCount() *MockGameState_OvertimeCount_Call {
	return &MockGameState_OvertimeCount_Call{Call: _e.mock.On("OvertimeCount")}
}

func (_c *MockGameState_OvertimeCount_Call) Run(run func()) *MockGameState_OvertimeCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_OvertimeCount_Call) Return(_a0 int) *MockGameState_OvertimeCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_OvertimeCount_Call) RunAndReturn(run func() int) *MockGameState_OvertimeCount_Call {
	_c.Call.Return(run)
	return _c
}

// Participants provides a mock function with given fields:
func (_m *MockGameState) Participants() demoinfocs.Participants {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Participants")
	}

	var r0 demoinfocs.Participants
	if rf, ok := ret.Get(0).(func() demoinfocs.Participants); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(demoinfocs.Participants)
		}
	}

	return r0
}

// MockGameState_Participants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Participants'
type MockGameState_Participants_Call struct {
	*mock.Call
}

// Participants is a helper method to define mock.On call
func (_e *MockGameState_Expecter) Participants() *MockGameState_Participants_Call {
	return &MockGameState_Participants_Call{Call: _e.mock.On("Participants")}
}

func (_c *MockGameState_Participants_Call) Run(run func()) *MockGameState_Participants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_Participants_Call) Return(_a0 demoinfocs.Participants) *MockGameState_Participants_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_Participants_Call) RunAndReturn(run func() demoinfocs.Participants) *MockGameState_Participants_Call {
	_c.Call.Return(run)
	return _c
}

// PlayerResourceEntity provides a mock function with given fields:
func (_m *MockGameState) PlayerResourceEntity() sendtables.Entity {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PlayerResourceEntity")
	}

	var r0 sendtables.Entity
	if rf, ok := ret.Get(0).(func() sendtables.Entity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sendtables.Entity)
		}
	}

	return r0
}

// MockGameState_PlayerResourceEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlayerResourceEntity'
type MockGameState_PlayerResourceEntity_Call struct {
	*mock.Call
}

// PlayerResourceEntity is a helper method to define mock.On call
func (_e *MockGameState_Expecter) PlayerResourceEntity() *MockGameState_PlayerResourceEntity_Call {
	return &MockGameState_PlayerResourceEntity_Call{Call: _e.mock.On("PlayerResourceEntity")}
}

func (_c *MockGameState_PlayerResourceEntity_Call) Run(run func()) *MockGameState_PlayerResourceEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_PlayerResourceEntity_Call) Return(_a0 sendtables.Entity) *MockGameState_PlayerResourceEntity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_PlayerResourceEntity_Call) RunAndReturn(run func() sendtables.Entity) *MockGameState_PlayerResourceEntity_Call {
	_c.Call.Return(run)
	return _c
}

// Rules provides a mock function with given fields:
func (_m *MockGameState) Rules() demoinfocs.GameRules {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rules")
	}

	var r0 demoinfocs.GameRules
	if rf, ok := ret.Get(0).(func() demoinfocs.GameRules); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(demoinfocs.GameRules)
		}
	}

	return r0
}

// MockGameState_Rules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rules'
type MockGameState_Rules_Call struct {
	*mock.Call
}

// Rules is a helper method to define mock.On call
func (_e *MockGameState_Expecter) Rules() *MockGameState_Rules_Call {
	return &MockGameState_Rules_Call{Call: _e.mock.On("Rules")}
}

func (_c *MockGameState_Rules_Call) Run(run func()) *MockGameState_Rules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_Rules_Call) Return(_a0 demoinfocs.GameRules) *MockGameState_Rules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_Rules_Call) RunAndReturn(run func() demoinfocs.GameRules) *MockGameState_Rules_Call {
	_c.Call.Return(run)
	return _c
}

// Team provides a mock function with given fields: team
func (_m *MockGameState) Team(team common.Team) *common.TeamState {
	ret := _m.Called(team)

	if len(ret) == 0 {
		panic("no return value specified for Team")
	}

	var r0 *common.TeamState
	if rf, ok := ret.Get(0).(func(common.Team) *common.TeamState); ok {
		r0 = rf(team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.TeamState)
		}
	}

	return r0
}

// MockGameState_Team_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Team'
type MockGameState_Team_Call struct {
	*mock.Call
}

// Team is a helper method to define mock.On call
//   - team common.Team
func (_e *MockGameState_Expecter) Team(team interface{}) *MockGameState_Team_Call {
	return &MockGameState_Team_Call{Call: _e.mock.On("Team", team)}
}

func (_c *MockGameState_Team_Call) Run(run func(team common.Team)) *MockGameState_Team_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Team))
	})
	return _c
}

func (_c *MockGameState_Team_Call) Return(_a0 *common.TeamState) *MockGameState_Team_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_Team_Call) RunAndReturn(run func(common.Team) *common.TeamState) *MockGameState_Team_Call {
	_c.Call.Return(run)
	return _c
}

// TeamCounterTerrorists provides a mock function with given fields:
func (_m *MockGameState) TeamCounterTerrorists() *common.TeamState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TeamCounterTerrorists")
	}

	var r0 *common.TeamState
	if rf, ok := ret.Get(0).(func() *common.TeamState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.TeamState)
		}
	}

	return r0
}

// MockGameState_TeamCounterTerrorists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamCounterTerrorists'
type MockGameState_TeamCounterTerrorists_Call struct {
	*mock.Call
}

// TeamCounterTerrorists is a helper method to define mock.On call
func (_e *MockGameState_Expecter) TeamCounterTerrorists() *MockGameState_TeamCounterTerrorists_Call {
	return &MockGameState_TeamCounterTerrorists_Call{Call: _e.mock.On("TeamCounterTerrorists")}
}

func (_c *MockGameState_TeamCounterTerrorists_Call) Run(run func()) *MockGameState_TeamCounterTerrorists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_TeamCounterTerrorists_Call) Return(_a0 *common.TeamState) *MockGameState_TeamCounterTerrorists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_TeamCounterTerrorists_Call) RunAndReturn(run func() *common.TeamState) *MockGameState_TeamCounterTerrorists_Call {
	_c.Call.Return(run)
	return _c
}

// TeamTerrorists provides a mock function with given fields:
func (_m *MockGameState) TeamTerrorists() *common.TeamState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TeamTerrorists")
	}

	var r0 *common.TeamState
	if rf, ok := ret.Get(0).(func() *common.TeamState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.TeamState)
		}
	}

	return r0
}

// MockGameState_TeamTerrorists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamTerrorists'
type MockGameState_TeamTerrorists_Call struct {
	*mock.Call
}

// TeamTerrorists is a helper method to define mock.On call
func (_e *MockGameState_Expecter) TeamTerrorists() *MockGameState_TeamTerrorists_Call {
	return &MockGameState_TeamTerrorists_Call{Call: _e.mock.On("TeamTerrorists")}
}

func (_c *MockGameState_TeamTerrorists_Call) Run(run func()) *MockGameState_TeamTerrorists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_TeamTerrorists_Call) Return(_a0 *common.TeamState) *MockGameState_TeamTerrorists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_TeamTerrorists_Call) RunAndReturn(run func() *common.TeamState) *MockGameState_TeamTerrorists_Call {
	_c.Call.Return(run)
	return _c
}

// TotalRoundsPlayed provides a mock function with given fields:
func (_m *MockGameState) TotalRoundsPlayed() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TotalRoundsPlayed")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockGameState_TotalRoundsPlayed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalRoundsPlayed'
type MockGameState_TotalRoundsPlayed_Call struct {
	*mock.Call
}

// TotalRoundsPlayed is a helper method to define mock.On call
func (_e *MockGameState_Expecter) TotalRoundsPlayed() *MockGameState_TotalRoundsPlayed_Call {
	return &MockGameState_TotalRoundsPlayed_Call{Call: _e.mock.On("TotalRoundsPlayed")}
}

func (_c *MockGameState_TotalRoundsPlayed_Call) Run(run func()) *MockGameState_TotalRoundsPlayed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_TotalRoundsPlayed_Call) Return(_a0 int) *MockGameState_TotalRoundsPlayed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_TotalRoundsPlayed_Call) RunAndReturn(run func() int) *MockGameState_TotalRoundsPlayed_Call {
	_c.Call.Return(run)
	return _c
}

// Weapons provides a mock function with given fields:
func (_m *MockGameState) Weapons() map[int]*common.Equipment {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Weapons")
	}

	var r0 map[int]*common.Equipment
	if rf, ok := ret.Get(0).(func() map[int]*common.Equipment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]*common.Equipment)
		}
	}

	return r0
}

// MockGameState_Weapons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Weapons'
type MockGameState_Weapons_Call struct {
	*mock.Call
}

// Weapons is a helper method to define mock.On call
func (_e *MockGameState_Expecter) Weapons() *MockGameState_Weapons_Call {
	return &MockGameState_Weapons_Call{Call: _e.mock.On("Weapons")}
}

func (_c *MockGameState_Weapons_Call) Run(run func()) *MockGameState_Weapons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameState_Weapons_Call) Return(_a0 map[int]*common.Equipment) *MockGameState_Weapons_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGameState_Weapons_Call) RunAndReturn(run func() map[int]*common.Equipment) *MockGameState_Weapons_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGameState creates a new instance of MockGameState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGameState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGameState {
	mock := &MockGameState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
