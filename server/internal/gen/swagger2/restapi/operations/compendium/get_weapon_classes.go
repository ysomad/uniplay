// Code generated by go-swagger; DO NOT EDIT.

package compendium

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetWeaponClassesHandlerFunc turns a function with the right signature into a get weapon classes handler
type GetWeaponClassesHandlerFunc func(GetWeaponClassesParams) GetWeaponClassesResponder

// Handle executing the request and returning a response
func (fn GetWeaponClassesHandlerFunc) Handle(params GetWeaponClassesParams) GetWeaponClassesResponder {
	return fn(params)
}

// GetWeaponClassesHandler interface for that can handle valid get weapon classes params
type GetWeaponClassesHandler interface {
	Handle(GetWeaponClassesParams) GetWeaponClassesResponder
}

// NewGetWeaponClasses creates a new http.Handler for the get weapon classes operation
func NewGetWeaponClasses(ctx *middleware.Context, handler GetWeaponClassesHandler) *GetWeaponClasses {
	return &GetWeaponClasses{Context: ctx, Handler: handler}
}

/*
	GetWeaponClasses swagger:route GET /compendiums/weapon-classes compendium getWeaponClasses

Получение списка классов оружий
*/
type GetWeaponClasses struct {
	Context *middleware.Context
	Handler GetWeaponClassesHandler
}

func (o *GetWeaponClasses) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetWeaponClassesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
