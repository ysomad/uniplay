// Code generated by go-swagger; DO NOT EDIT.

package player

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPlayerMatchesHandlerFunc turns a function with the right signature into a get player matches handler
type GetPlayerMatchesHandlerFunc func(GetPlayerMatchesParams) GetPlayerMatchesResponder

// Handle executing the request and returning a response
func (fn GetPlayerMatchesHandlerFunc) Handle(params GetPlayerMatchesParams) GetPlayerMatchesResponder {
	return fn(params)
}

// GetPlayerMatchesHandler interface for that can handle valid get player matches params
type GetPlayerMatchesHandler interface {
	Handle(GetPlayerMatchesParams) GetPlayerMatchesResponder
}

// NewGetPlayerMatches creates a new http.Handler for the get player matches operation
func NewGetPlayerMatches(ctx *middleware.Context, handler GetPlayerMatchesHandler) *GetPlayerMatches {
	return &GetPlayerMatches{Context: ctx, Handler: handler}
}

/*
	GetPlayerMatches swagger:route GET /players/{steam_id}/matches player getPlayerMatches

Получение матчей игрока
*/
type GetPlayerMatches struct {
	Context *middleware.Context
	Handler GetPlayerMatchesHandler
}

func (o *GetPlayerMatches) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPlayerMatchesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
