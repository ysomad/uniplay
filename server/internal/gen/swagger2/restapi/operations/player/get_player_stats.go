// Code generated by go-swagger; DO NOT EDIT.

package player

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPlayerStatsHandlerFunc turns a function with the right signature into a get player stats handler
type GetPlayerStatsHandlerFunc func(GetPlayerStatsParams) GetPlayerStatsResponder

// Handle executing the request and returning a response
func (fn GetPlayerStatsHandlerFunc) Handle(params GetPlayerStatsParams) GetPlayerStatsResponder {
	return fn(params)
}

// GetPlayerStatsHandler interface for that can handle valid get player stats params
type GetPlayerStatsHandler interface {
	Handle(GetPlayerStatsParams) GetPlayerStatsResponder
}

// NewGetPlayerStats creates a new http.Handler for the get player stats operation
func NewGetPlayerStats(ctx *middleware.Context, handler GetPlayerStatsHandler) *GetPlayerStats {
	return &GetPlayerStats{Context: ctx, Handler: handler}
}

/*
	GetPlayerStats swagger:route GET /players/{steam_id}/stats player getPlayerStats

Получение статистики игрока
*/
type GetPlayerStats struct {
	Context *middleware.Context
	Handler GetPlayerStatsHandler
}

func (o *GetPlayerStats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPlayerStatsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
