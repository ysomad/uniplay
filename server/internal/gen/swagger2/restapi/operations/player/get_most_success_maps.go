// Code generated by go-swagger; DO NOT EDIT.

package player

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMostSuccessMapsHandlerFunc turns a function with the right signature into a get most success maps handler
type GetMostSuccessMapsHandlerFunc func(GetMostSuccessMapsParams) GetMostSuccessMapsResponder

// Handle executing the request and returning a response
func (fn GetMostSuccessMapsHandlerFunc) Handle(params GetMostSuccessMapsParams) GetMostSuccessMapsResponder {
	return fn(params)
}

// GetMostSuccessMapsHandler interface for that can handle valid get most success maps params
type GetMostSuccessMapsHandler interface {
	Handle(GetMostSuccessMapsParams) GetMostSuccessMapsResponder
}

// NewGetMostSuccessMaps creates a new http.Handler for the get most success maps operation
func NewGetMostSuccessMaps(ctx *middleware.Context, handler GetMostSuccessMapsHandler) *GetMostSuccessMaps {
	return &GetMostSuccessMaps{Context: ctx, Handler: handler}
}

/*
	GetMostSuccessMaps swagger:route GET /players/{steam_id}/most-success-maps player getMostSuccessMaps

Получение списка карт с наибольшим винрейтом
*/
type GetMostSuccessMaps struct {
	Context *middleware.Context
	Handler GetMostSuccessMapsHandler
}

func (o *GetMostSuccessMaps) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMostSuccessMapsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
