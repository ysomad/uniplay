// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WeaponListInner weapon list inner
//
// swagger:model WeaponList_inner
type WeaponListInner struct {

	// имя класса оружия
	// Required: true
	Class string `json:"class"`

	// class id
	// Required: true
	ClassID int16 `json:"class_id"`

	// название оружия
	// Required: true
	Weapon string `json:"weapon"`

	// weapon id
	// Required: true
	WeaponID int16 `json:"weapon_id"`
}

// Validate validates this weapon list inner
func (m *WeaponListInner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClassID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeapon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeaponID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WeaponListInner) validateClass(formats strfmt.Registry) error {

	if err := validate.RequiredString("class", "body", m.Class); err != nil {
		return err
	}

	return nil
}

func (m *WeaponListInner) validateClassID(formats strfmt.Registry) error {

	if err := validate.Required("class_id", "body", int16(m.ClassID)); err != nil {
		return err
	}

	return nil
}

func (m *WeaponListInner) validateWeapon(formats strfmt.Registry) error {

	if err := validate.RequiredString("weapon", "body", m.Weapon); err != nil {
		return err
	}

	return nil
}

func (m *WeaponListInner) validateWeaponID(formats strfmt.Registry) error {

	if err := validate.Required("weapon_id", "body", int16(m.WeaponID)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this weapon list inner based on context it is used
func (m *WeaponListInner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WeaponListInner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WeaponListInner) UnmarshalBinary(b []byte) error {
	var res WeaponListInner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
