// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlayerMatch player match
//
// swagger:model PlayerMatch
type PlayerMatch struct {

	// id
	// Required: true
	// Format: uuid
	ID strfmt.UUID `json:"id"`

	// map
	// Required: true
	Map Map `json:"map"`

	// Состояние матча:
	//  * -1 - Проигрыш
	//  * 0 - Ничья
	//  * 1 - Победа
	//
	// Required: true
	MatchState int8 `json:"match_state"`

	// match stats
	// Required: true
	MatchStats *PlayerMatchMatchStats `json:"match_stats"`

	// score
	// Required: true
	Score string `json:"score"`

	// uploaded at
	// Required: true
	// Format: date-time
	UploadedAt strfmt.DateTime `json:"uploaded_at"`
}

// Validate validates this player match
func (m *PlayerMatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlayerMatch) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PlayerMatch) validateMap(formats strfmt.Registry) error {

	if err := m.Map.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("map")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("map")
		}
		return err
	}

	return nil
}

func (m *PlayerMatch) validateMatchState(formats strfmt.Registry) error {

	if err := validate.Required("match_state", "body", int8(m.MatchState)); err != nil {
		return err
	}

	return nil
}

func (m *PlayerMatch) validateMatchStats(formats strfmt.Registry) error {

	if err := validate.Required("match_stats", "body", m.MatchStats); err != nil {
		return err
	}

	if m.MatchStats != nil {
		if err := m.MatchStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("match_stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("match_stats")
			}
			return err
		}
	}

	return nil
}

func (m *PlayerMatch) validateScore(formats strfmt.Registry) error {

	if err := validate.RequiredString("score", "body", m.Score); err != nil {
		return err
	}

	return nil
}

func (m *PlayerMatch) validateUploadedAt(formats strfmt.Registry) error {

	if err := validate.Required("uploaded_at", "body", strfmt.DateTime(m.UploadedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("uploaded_at", "body", "date-time", m.UploadedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this player match based on the context it is used
func (m *PlayerMatch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlayerMatch) contextValidateMap(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Map.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("map")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("map")
		}
		return err
	}

	return nil
}

func (m *PlayerMatch) contextValidateMatchStats(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchStats != nil {
		if err := m.MatchStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("match_stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("match_stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlayerMatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlayerMatch) UnmarshalBinary(b []byte) error {
	var res PlayerMatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
